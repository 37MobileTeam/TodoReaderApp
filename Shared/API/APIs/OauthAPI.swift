//
// OauthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class OauthAPI {
    /**
     oauth20_token.srf
     
     - parameter clientId: (form) 客户端ID (optional)
     - parameter scope: (form) 授权返回 (optional)
     - parameter refreshToken: (form) 刷新令牌 (optional)
     - parameter clientSecret: (form) 客户端密钥 (optional)
     - parameter grantType: (form) 授权类型 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func oauth20TokenSrfPost(clientId: String? = nil, scope: String? = nil, refreshToken: String? = nil, clientSecret: String? = nil, grantType: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        oauth20TokenSrfPostWithRequestBuilder(clientId: clientId, scope: scope, refreshToken: refreshToken, clientSecret: clientSecret, grantType: grantType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     oauth20_token.srf
     - POST /oauth20_token.srf
     - parameter clientId: (form) 客户端ID (optional)
     - parameter scope: (form) 授权返回 (optional)
     - parameter refreshToken: (form) 刷新令牌 (optional)
     - parameter clientSecret: (form) 客户端密钥 (optional)
     - parameter grantType: (form) 授权类型 (optional)
     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func oauth20TokenSrfPostWithRequestBuilder(clientId: String? = nil, scope: String? = nil, refreshToken: String? = nil, clientSecret: String? = nil, grantType: String? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/oauth20_token.srf"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "client_id": clientId?.encodeToJSON(),
            "scope": scope?.encodeToJSON(),
            "refresh_token": refreshToken?.encodeToJSON(),
            "client_secret": clientSecret?.encodeToJSON(),
            "grant_type": grantType?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
