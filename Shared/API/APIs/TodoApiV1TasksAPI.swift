//
// TodoApiV1TasksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TodoApiV1TasksAPI {
    /**
     添加提醒
     
     - parameter id1: (path)  
     - parameter inlineObject3: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId1Post(id1: String, inlineObject3: InlineObject3? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId1PostWithRequestBuilder(id1: id1, inlineObject3: inlineObject3).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加提醒
     - POST /todob2/api/v1/tasks/{id1}
     - parameter id1: (path)  
     - parameter inlineObject3: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func todob2ApiV1TasksId1PostWithRequestBuilder(id1: String, inlineObject3: InlineObject3? = nil) -> RequestBuilder<InlineResponse2005> {
        var path = "/todob2/api/v1/tasks/{id1}"
        let id1PreEscape = "\(APIHelper.mapValueToPathItem(id1))"
        let id1PostEscape = id1PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id1}", with: id1PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject3)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     添加到期时间
     
     - parameter id2: (path)  
     - parameter inlineObject5: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId2Post(id2: String, inlineObject5: InlineObject5? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId2PostWithRequestBuilder(id2: id2, inlineObject5: inlineObject5).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加到期时间
     - POST /todob2/api/v1/tasks/{id2}
     - parameter id2: (path)  
     - parameter inlineObject5: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func todob2ApiV1TasksId2PostWithRequestBuilder(id2: String, inlineObject5: InlineObject5? = nil) -> RequestBuilder<InlineResponse2009> {
        var path = "/todob2/api/v1/tasks/{id2}"
        let id2PreEscape = "\(APIHelper.mapValueToPathItem(id2))"
        let id2PostEscape = id2PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id2}", with: id2PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject5)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     修改任务重复周期
     
     - parameter id3: (path)  
     - parameter inlineObject4: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId3Post(id3: String, inlineObject4: InlineObject4? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId3PostWithRequestBuilder(id3: id3, inlineObject4: inlineObject4).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     修改任务重复周期
     - POST /todob2/api/v1/tasks/{id3}
     - 修改任务重复周期
     - parameter id3: (path)  
     - parameter inlineObject4: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func todob2ApiV1TasksId3PostWithRequestBuilder(id3: String, inlineObject4: InlineObject4? = nil) -> RequestBuilder<InlineResponse2008> {
        var path = "/todob2/api/v1/tasks/{id3}"
        let id3PreEscape = "\(APIHelper.mapValueToPathItem(id3))"
        let id3PostEscape = id3PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id3}", with: id3PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject4)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     上传附件
     
     - parameter id4: (path)  
     - parameter name: (form) 图片文件名 
     - parameter file: (form) 文件 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId4AttachmentsPost(id4: String, name: String, file: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId4AttachmentsPostWithRequestBuilder(id4: id4, name: name, file: file).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     上传附件
     - POST /todob2/api/v1/tasks/{id4}/attachments
     - 上传图片
     - parameter id4: (path)  
     - parameter name: (form) 图片文件名 
     - parameter file: (form) 文件 (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func todob2ApiV1TasksId4AttachmentsPostWithRequestBuilder(id4: String, name: String, file: URL? = nil) -> RequestBuilder<InlineResponse2001> {
        var path = "/todob2/api/v1/tasks/{id4}/attachments"
        let id4PreEscape = "\(APIHelper.mapValueToPathItem(id4))"
        let id4PostEscape = id4PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id4}", with: id4PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "Name": name.encodeToJSON(),
            "file": file?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     修改描述
     
     - parameter id5: (path)  
     - parameter inlineObject1: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId5Post(id5: String, inlineObject1: InlineObject1? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId5PostWithRequestBuilder(id5: id5, inlineObject1: inlineObject1).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     修改描述
     - POST /todob2/api/v1/tasks/{id5}
     - parameter id5: (path)  
     - parameter inlineObject1: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func todob2ApiV1TasksId5PostWithRequestBuilder(id5: String, inlineObject1: InlineObject1? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/todob2/api/v1/tasks/{id5}"
        let id5PreEscape = "\(APIHelper.mapValueToPathItem(id5))"
        let id5PostEscape = id5PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id5}", with: id5PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject1)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     添加到我的一天
     
     - parameter id6: (path)  
     - parameter inlineObject6: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todob2ApiV1TasksId6Post(id6: String, inlineObject6: InlineObject6? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20010?,_ error: Error?) -> Void)) {
        todob2ApiV1TasksId6PostWithRequestBuilder(id6: id6, inlineObject6: inlineObject6).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加到我的一天
     - POST /todob2/api/v1/tasks/{id6}
     - parameter id6: (path)  
     - parameter inlineObject6: (body)  (optional)
     - returns: RequestBuilder<InlineResponse20010> 
     */
    open class func todob2ApiV1TasksId6PostWithRequestBuilder(id6: String, inlineObject6: InlineObject6? = nil) -> RequestBuilder<InlineResponse20010> {
        var path = "/todob2/api/v1/tasks/{id6}"
        let id6PreEscape = "\(APIHelper.mapValueToPathItem(id6))"
        let id6PostEscape = id6PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id6}", with: id6PostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject6)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20010>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
